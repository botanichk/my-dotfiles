#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Void Community AppImage Helper ‚Äî –†—É—Å—Å–∫–∞—è –≤–µ—Ä—Å–∏—è (–ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–æ–ª—å–∫–æ AppImageHub)
# –ê–≤—Ç–æ—Ä: Pinguin-TV (–ø–µ—Ä–µ–≤–æ–¥ –∏ —Ñ–∏–∫—Å—ã: —Ç–≤–æ–π –±—Ä–∞—Ç–∏–∫ üêß)
# –ü—Ä–æ–µ–∫—Ç: Void-Gemeni

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gdk, GLib, Gio
import os
import json
import requests
import threading
import subprocess
import shutil
from urllib.parse import quote, urljoin
from pathlib import Path

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
CONFIG_DIR = os.path.expanduser("~/.config/appimages")
CONFIG_FILE = os.path.join(CONFIG_DIR, "settings.json")
APP_DIR = "/usr/local/bin/appimages"
ICON_BASE_DIR = os.path.expanduser("~/.local/share/icons/hicolor/128x128/apps")
DEFAULT_APPIMAGE_DIR = os.path.expanduser("~/AppImages")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def ensure_dir(path):
    try:
        Path(path).mkdir(parents=True, exist_ok=True)
        return True
    except Exception:
        return False

# --- –ö–ª–∞—Å—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
class AppImageManager(Gtk.Window):
    def __init__(self):
        super().__init__(title="Void Community AppImage Helper")
        self.window = self
        self.set_default_size(800, 600)
        self.set_border_width(10)
        self.set_position(Gtk.WindowPosition.CENTER)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        defaults = {
            'appimage_dir': DEFAULT_APPIMAGE_DIR,
            'opacity': 0.95
        }

        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        try:
            with open(CONFIG_FILE, 'r') as f:
                self.settings = json.load(f)
            self.settings = {**defaults, **self.settings}
        except (FileNotFoundError, json.JSONDecodeError):
            self.settings = defaults

        # –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        self.apply_transparency()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        self.initialize_app_directory()

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        self.download_active = False
        self.current_download_path = None

        # UI
        self.setup_ui()
        self.connect("destroy", Gtk.main_quit)

    def setup_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
        self.add(vbox)

        # –ú–µ–Ω—é–±–∞—Ä
        menubar = Gtk.MenuBar()
        vbox.pack_start(menubar, False, False, 0)

        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = Gtk.Menu()
        file_item = Gtk.MenuItem(label="–§–∞–π–ª")
        file_item.set_submenu(file_menu)

        quit_item = Gtk.MenuItem(label="–í—ã—Ö–æ–¥")
        quit_item.connect("activate", Gtk.main_quit)
        file_menu.append(quit_item)
        menubar.append(file_item)

        # –ú–µ–Ω—é "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
        tools_menu = Gtk.Menu()
        tools_item = Gtk.MenuItem(label="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        tools_item.set_submenu(tools_menu)

        settings_item = Gtk.MenuItem(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings_item.connect("activate", self.open_settings)
        tools_menu.append(settings_item)
        menubar.append(tools_item)

        # –ú–µ–Ω—é "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        info_menu = Gtk.Menu()
        info_item = Gtk.MenuItem(label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        info_item.set_submenu(info_menu)

        about_item = Gtk.MenuItem(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        about_item.connect("activate", self.show_about)
        info_menu.append(about_item)
        menubar.append(info_item)

        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        hbox_search = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        self.entry_search = Gtk.Entry()
        self.entry_search.set_placeholder_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        self.button_search = Gtk.Button(label="–ü–æ–∏—Å–∫")
        self.button_search.connect("clicked", self.on_search_clicked)
        hbox_search.pack_start(self.entry_search, True, True, 0)
        hbox_search.pack_start(self.button_search, False, False, 0)
        vbox.pack_start(hbox_search, False, False, 0)

        # –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.listbox_results = Gtk.ListBox()
        self.listbox_results.set_selection_mode(Gtk.SelectionMode.NONE)
        scrolled_results = Gtk.ScrolledWindow()
        scrolled_results.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
        scrolled_results.add(self.listbox_results)
        scrolled_results.set_size_request(-1, 300)
        vbox.pack_start(scrolled_results, True, True, 0)

        # –°—Ç–∞—Ç—É—Å-–±–∞—Ä
        self.statusbar = Gtk.Label(label="–ì–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É...")
        self.statusbar.set_halign(Gtk.Align.START)
        vbox.pack_start(self.statusbar, False, False, 5)

        # –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–æ–π
        self.button_download = Gtk.Button(label="–°–∫–∞—á–∞—Ç—å")
        self.button_download.set_sensitive(False)
        self.button_download.connect("clicked", self.on_download_clicked)
        vbox.pack_start(self.button_download, False, False, 0)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar = Gtk.ProgressBar()
        self.progress_bar.set_fraction(0.0)
        self.progress_bar.set_text("0%")
        self.progress_bar.set_show_text(True)
        vbox.pack_start(self.progress_bar, False, False, 0)

    def update_status(self, text):
        GLib.idle_add(self.statusbar.set_text, text)

    def on_search_clicked(self, widget):
        query = self.entry_search.get_text().strip()
        if not query:
            self.update_status("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞!")
            return

        self.update_status("–ü–æ–∏—Å–∫... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        self.listbox_results.foreach(lambda child: self.listbox_results.remove(child))
        self.button_download.set_sensitive(False)

        thread = threading.Thread(target=self.search_appimages, args=(query,))
        thread.daemon = True
        thread.start()

    def search_appimages(self, query):
        results = []
        try:
            # –ü–æ–∏—Å–∫ –¢–û–õ–¨–ö–û –Ω–∞ AppImageHub ‚Äî GitHub –æ—Ç–∫–ª—é—á–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏
            hub_url = f"https://appimage.github.io/api/applications/?search={quote(query)}"
            response = requests.get(hub_url, timeout=10)
            if response.status_code == 200:
                data = response.json()
                for item in data.get('results', []):
                    name = item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    description = item.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                    download_url = item.get('download_url', '')
                    icon_url = item.get('icon_url', '')
                    # –§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ .AppImage
                    if download_url and download_url.endswith('.AppImage'):
                        results.append({
                            'name': name,
                            'description': description,
                            'url': download_url,
                            'icon_url': icon_url,
                            'source': 'AppImageHub'
                        })
                    else:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ AppImage
                        continue

        except Exception as e:
            GLib.idle_add(self.update_status, f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return

        GLib.idle_add(self.display_results, results)

    def display_results(self, results):
        if not results:
            self.update_status("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        for item in results:
            row = Gtk.ListBoxRow()
            hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=10)

            # –ò–∫–æ–Ω–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)
            icon = Gtk.Image.new_from_icon_name("application-x-executable", Gtk.IconSize.DIALOG)
            hbox.pack_start(icon, False, False, 0)

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            vbox_info = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=2)
            label_name = Gtk.Label(label=f"<b>{item['name']}</b> ({item['source']})", use_markup=True)
            label_name.set_halign(Gtk.Align.START)
            label_desc = Gtk.Label(label=item['description'][:100] + "..." if len(item['description']) > 100 else item['description'])
            label_desc.set_halign(Gtk.Align.START)
            label_desc.get_style_context().add_class("dim-label")
            vbox_info.pack_start(label_name, False, False, 0)
            vbox_info.pack_start(label_desc, False, False, 0)
            hbox.pack_start(vbox_info, True, True, 0)

            # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞
            button_select = Gtk.Button(label="–í—ã–±—Ä–∞—Ç—å")
            button_select.connect("clicked", self.on_select_result, item)
            hbox.pack_start(button_select, False, False, 0)

            row.add(hbox)
            self.listbox_results.add(row)

        self.listbox_results.show_all()
        self.update_status(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

    def on_select_result(self, button, item):
        self.selected_item = item
        self.button_download.set_sensitive(True)
        self.update_status(f"–í—ã–±—Ä–∞–Ω–æ: {item['name']} ‚Äî –≥–æ—Ç–æ–≤–æ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é.")

    def on_download_clicked(self, widget):
        if not hasattr(self, 'selected_item'):
            self.update_status("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!")
            return

        item = self.selected_item
        url = item['url']
        if not url:
            self.update_status("–ù–µ—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = url.split('/')[-1]
        if not filename.endswith('.AppImage'):
            filename = f"{item['name'].replace(' ', '_')}.AppImage"

        self.current_download_path = os.path.join(self.settings['appimage_dir'], filename)

        # –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.download_active = True
        self.button_download.set_sensitive(False)
        self.progress_bar.set_fraction(0.0)
        self.update_status("–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...")

        thread = threading.Thread(target=self.download_appimage, args=(url, self.current_download_path))
        thread.daemon = True
        thread.start()

    def download_appimage(self, url, filepath):
        try:
            response = requests.get(url, stream=True, timeout=30)
            response.raise_for_status()

            total_size = int(response.headers.get('content-length', 0))
            downloaded = 0

            ensure_dir(os.path.dirname(filepath))
            with open(filepath, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if not self.download_active:
                        GLib.idle_add(self.update_status, "–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                        return
                    if chunk:
                        f.write(chunk)
                        downloaded += len(chunk)
                        if total_size > 0:
                            fraction = downloaded / total_size
                            GLib.idle_add(self.progress_bar.set_fraction, fraction)
                            GLib.idle_add(self.progress_bar.set_text, f"{int(fraction * 100)}%")

            # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
            os.chmod(filepath, 0o755)

            # –°–æ–∑–¥–∞—ë–º .desktop —Ñ–∞–π–ª
            self.create_desktop_entry(filepath, self.selected_item['name'], self.selected_item.get('icon_url', ''))

            GLib.idle_add(self.update_status, "–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            GLib.idle_add(self.progress_bar.set_fraction, 1.0)
            GLib.idle_add(self.progress_bar.set_text, "100% ‚Äî –ì–æ—Ç–æ–≤–æ!")

        except Exception as e:
            GLib.idle_add(self.update_status, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        finally:
            self.download_active = False
            GLib.idle_add(self.button_download.set_sensitive, True)

    def create_desktop_entry(self, appimage_path, name, icon_url):
        desktop_filename = f"{name.replace(' ', '_').lower()}.desktop"
        desktop_path = os.path.expanduser(f"~/.local/share/applications/{desktop_filename}")

        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å URL
        icon_path = "application-x-executable"
        if icon_url:
            icon_filename = f"{name.replace(' ', '_').lower()}.png"
            icon_path = os.path.join(ICON_BASE_DIR, icon_filename)
            try:
                response = requests.get(icon_url, timeout=10)
                if response.status_code == 200:
                    ensure_dir(ICON_BASE_DIR)
                    with open(icon_path, 'wb') as f:
                        f.write(response.content)
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏–∫–æ–Ω–æ–∫
                    subprocess.run(['gtk-update-icon-cache', '-f', os.path.expanduser('~/.local/share/icons/hicolor')], capture_output=True)
                    icon_path = icon_filename
            except:
                icon_path = "application-x-executable"

        # –°–æ–∑–¥–∞—ë–º .desktop —Ñ–∞–π–ª
        desktop_content = f"""[Desktop Entry]
Name={name}
Exec={appimage_path}
Icon={icon_path}
Type=Application
Categories=Utility;
Comment=–ó–∞–ø—É—Å—Ç–∏—Ç—å {name} —á–µ—Ä–µ–∑ AppImage
Terminal=false
"""

        try:
            ensure_dir(os.path.dirname(desktop_path))
            with open(desktop_path, 'w') as f:
                f.write(desktop_content)
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –º–µ–Ω—é
            subprocess.run(['update-desktop-database', os.path.expanduser('~/.local/share/applications')], capture_output=True)
        except Exception as e:
            self.update_status(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å .desktop —Ñ–∞–π–ª: {e}")

    def open_settings(self, widget):
        dialog = Gtk.Dialog(title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", transient_for=self, flags=0)
        dialog.add_buttons("OK", Gtk.ResponseType.OK, "–û—Ç–º–µ–Ω–∞", Gtk.ResponseType.CANCEL)
        dialog.set_default_size(400, 200)

        box = dialog.get_content_area()
        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
        vbox.set_border_width(10)
        box.add(vbox)

        # –ü–∞–ø–∫–∞ –¥–ª—è AppImage
        hbox_dir = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        label_dir = Gtk.Label(label="–ü–∞–ø–∫–∞ –¥–ª—è AppImage:")
        self.entry_dir = Gtk.Entry()
        self.entry_dir.set_text(self.settings['appimage_dir'])
        button_browse = Gtk.Button(label="–û–±–∑–æ—Ä...")
        button_browse.connect("clicked", self.on_browse_folder, self.entry_dir)
        hbox_dir.pack_start(label_dir, False, False, 0)
        hbox_dir.pack_start(self.entry_dir, True, True, 0)
        hbox_dir.pack_start(button_browse, False, False, 0)
        vbox.pack_start(hbox_dir, False, False, 0)

        # –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        hbox_opacity = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        label_opacity = Gtk.Label(label="–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (0.0‚Äì1.0):")
        self.spin_opacity = Gtk.SpinButton()
        self.spin_opacity.set_range(0.0, 1.0)
        self.spin_opacity.set_increments(0.05, 0.1)
        self.spin_opacity.set_digits(2)
        self.spin_opacity.set_value(self.settings['opacity'])
        hbox_opacity.pack_start(label_opacity, False, False, 0)
        hbox_opacity.pack_start(self.spin_opacity, True, True, 0)
        vbox.pack_start(hbox_opacity, False, False, 0)

        dialog.show_all()
        response = dialog.run()

        if response == Gtk.ResponseType.OK:
            new_dir = self.entry_dir.get_text().strip()
            new_opacity = self.spin_opacity.get_value()

            if new_dir and (os.path.isdir(new_dir) or ensure_dir(new_dir)):
                self.settings['appimage_dir'] = new_dir
                self.settings['opacity'] = new_opacity
                self.save_settings()
                self.apply_transparency()
                self.update_status("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
            else:
                self.update_status("–û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞.")

        dialog.destroy()

    def on_browse_folder(self, button, entry):
        dialog = Gtk.FileChooserDialog(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è AppImage",
            parent=self,
            action=Gtk.FileChooserAction.SELECT_FOLDER
        )
        dialog.add_buttons("–û—Ç–º–µ–Ω–∞", Gtk.ResponseType.CANCEL, "OK", Gtk.ResponseType.OK)

        response = dialog.run()
        if response == Gtk.ResponseType.OK:
            entry.set_text(dialog.get_filename())
        dialog.destroy()

    def show_about(self, widget):
        dialog = Gtk.AboutDialog()
        dialog.set_program_name("Void Community AppImage Helper")
        dialog.set_version("1.0")
        dialog.set_authors(["Pinguin-TV"])
        dialog.set_comments("–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AppImage-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ –Ω–∞ Void Linux.")
        dialog.set_website("https://codeberg.org/pinguin-tv/appimages")
        dialog.set_website_label("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞")
        dialog.set_logo_icon_name("application-x-executable")
        dialog.set_license_type(Gtk.License.UNKNOWN)
        dialog.set_copyright("¬© 2025 Pinguin-TV\n–ß–∞—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ Void-Gemeni")
        dialog.run()
        dialog.destroy()

    def load_settings(self):
        defaults = {
            'appimage_dir': DEFAULT_APPIMAGE_DIR,
            'opacity': 0.95
        }
        try:
            with open(CONFIG_FILE, 'r') as f:
                self.settings = json.load(f)
            self.settings = {**defaults, **self.settings}
        except (FileNotFoundError, json.JSONDecodeError):
            self.settings = defaults

    def save_settings(self):
        try:
            ensure_dir(CONFIG_DIR)
            with open(CONFIG_FILE, 'w') as f:
                json.dump(self.settings, f, indent=4)
        except IOError as e:
            self.update_status(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")

    def apply_transparency(self):
        screen = self.window.get_screen()
        if screen and screen.is_composited() and (visual := screen.get_rgba_visual()):
            self.window.set_visual(visual)
            provider = Gtk.CssProvider()
            css = (f"GtkWindow {{ background-color: rgba(45, 45, 45, {self.settings['opacity']}); }} "
                   f".dim-label {{ opacity: 0.7; font-size: 10pt; }}")
            provider.load_from_data(css.encode('utf-8'))
            Gtk.StyleContext.add_provider_for_screen(screen, provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)

    def initialize_app_directory(self):
        ensure_dir(self.settings['appimage_dir'])
        ensure_dir(APP_DIR)
        ensure_dir(ICON_BASE_DIR)

    def info_dialog(self, title, text):
        dialog = Gtk.MessageDialog(transient_for=self.window, modal=True, message_type=Gtk.MessageType.INFO, buttons=Gtk.ButtonsType.OK, text=title)
        dialog.format_secondary_text(text)
        dialog.run()
        dialog.destroy()

    def confirm_dialog(self, title, text) -> bool:
        dialog = Gtk.MessageDialog(transient_for=self.window, modal=True, message_type=Gtk.MessageType.QUESTION, buttons=Gtk.ButtonsType.YES_NO, text=title)
        dialog.format_secondary_text(text)
        resp = dialog.run()
        dialog.destroy()
        return resp == Gtk.ResponseType.YES

if __name__ == "__main__":
    app = AppImageManager()
    app.window.show_all()
    Gtk.main()
